f = influence_field(g)
f
g = goban('../sgf/blob-gnugo.sgf')
f = influence_field(g)
1==2==3
1==2==2
2==2==2
a=2
2==a==2
f = influence(g)
f
g = goban('../sgf/blob-gnugo.sgf')
f = influence(g)
f
g = goban('../sgf/blob-gnugo.sgf')
f = influence(g)
f
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
f
[ g.dump(f[k]) for k in f ]
area(g.b5)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
g = goban('../sgf/blob-gnugo.sgf'); f = influence(g)
g.dump(area(g.b5))
for k in f:
	print k
	g.dump(f[k])
score
score = lambda d: d[WHITE]>d[BLACK] and -d[WHITE]/(1+d[BLACK] or d[WHITE]<d[BLACK] and d[BLACK]/(1+d[WHITE]) or 0
score = lambda d: d[WHITE]>d[BLACK] and -d[WHITE]/(1+d[BLACK]) or d[WHITE]<d[BLACK] and d[BLACK]/(1+d[WHITE]) or 0
reduce(float.__add__, map(score, f.values()))
reduce(float.__add__, map(score, influence_field(g).values()))
score = lambda d: d[WHITE]>d[BLACK] and -float(d[WHITE])/(1+d[BLACK]) or d[WHITE]<d[BLACK] and float(d[BLACK])/(1+d[WHITE]) or 0.
reduce(float.__add__, map(score, influence_field(g).values()))
g=goban('../sgf/test.sgf')
g.dump()
g.dump(area(g.b3)
)
g.dump(area(g.b3))
g=goban('../sgf/test.sgf')
g.dump(area(g.b3))
g=goban('../sgf/test.sgf')
g.dump(area(g.b3))
area(g.b6)
g.dump(area(g.b6))
show_dead_groups(g)
remove_dead_groups(g)
g.dump()
scoreB = len(g.black)+area(g.b6))
scoreB = len(g.black)+area(g.b6)
scoreB = len(g.black)+len(area(g.b6))
scoreW = len(g.white)+len(area(g.b6))
scoreB = len(g.black)+len(area(g.b3))
scoreB
scoreW
scoreW+=g.komi
scoreW
scoreB
scoreW
g
g.dump()
g = goban('../sgf/blob-gnugo.sgf')
g.dump()
area(g.b6)
g.dump(area(g.b6))
g = goban('../sgf/blob-gnugo.sgf')
g.dump(area(g.b6))
g = goban('../sgf/blob-gnugo.sgf')
g.dump(area(g.b6))
g = goban('../sgf/blob-gnugo.sgf')
g.dump(area(g.b6))
g=goban('../sgf/test.sgf')
g.dump(area(g.b5))
g.dump(area(g.e2))
[ area(grp) for grp in g.groups ]
area(g.a7)
g.dump(area(g.a7))
g.dump(area(g.c7))
g = goban('../sgf/blob-gnugo.sgf')
a = [ area(grp) for grp in g.groups ]
a
A
A = []
while len(a)>0:
[ x for x in a if reduce(lambda a, b: a and b.color in (None, BLACK), x.neighbours, True) ]
aB = [ x for x in a if reduce(lambda a, b: a and b.color in (None, BLACK), x.neighbours, True) ]
g.dump(aB)
g.dump()
g.dump(aB)
aB
g.dump(aB[0])
aW = [ x for x in a if reduce(lambda a, b: a and b.color in (None, WHITE), x.neighbours, True) ]
aW
g.dump(reduce(lambda a, b: a.update(b) or a, aB, group(g)))
g.dump(reduce(lambda a, b: a.update(b) or a, aW, group(g)))
g.dump(area(g.c5.group))
[ x for x in a if reduce(lambda a, b: a and b.color in (None, BLACK), x.neighbours, True) ]
g=goban('../sgf/test.sgf')
a = [ area(grp) for grp in g.groups ]
A = reduce(lambda a,b:a.update(b) or a, a, group(g))
A
g.dump(A)
set
set.pop
def connex(S):
	ret = []
	if len(s)==0:
		return ret
	s = S.pop()
g.dump(aB[0])
g=goban('../sgf/test.sgf')
a = [ area(grp) for grp in g.groups ]
A = reduce(lambda a,b:a.update(b) or a, a, group(g))
A
connex(A)
g=goban('../sgf/test.sgf')
a = [ area(grp) for grp in g.groups ]
A = reduce(lambda a,b:a.update(b) or a, a, group(g))
connex(A)
g=goban('../sgf/test.sgf')
a = [ area(grp) for grp in g.groups ]
A = reduce(lambda a,b:a.update(b) or a, a, group(g))
connex(A)
A
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ]
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));g.dump(A);connex(A)
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));g.dump(A);C = connex(A)
C
len(C)
sorted(C)
for c in sorted(C): g.dump(c)
A
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));g.dump(A)
g.a1.group
g.dump(g.a1.group)
g.dump(g.a1.group).intersection(A)
A
g.dump(g.a1.group.intersection(A))
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));g.dump(A)
connex(A)
for c in connex(A):
	g.dump(c)
for c in connex(A):
	g.dump(c)
A
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));g.dump(A)
A
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A)
for c in connex(A):
	g.dump(c)
B=A
B=A.difference([g.a1, g.c8, g.e8, g.h3, g.f2])
B
for c in connex():
	g.dump(c)
B=connex(A)
B
B=list(connex(A))
B
b=B[0]
b
b.neighbours
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A)
B=list(connex(A))
b=B[0]
b.neighbours
v
b
B=list(connex(A))
B
b=B[1]
b
b.neighbours
set((n.group for n in b.neighbours))
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = group(g, (n.group for n in b.neighbours))
fg
g.dump(fg)
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = union(n.group for n in b.neighbours)))
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = union(n.group for n in b.neighbours))
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = union((n.group for n in b.neighbours))
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = union(g, (n.group for n in b.neighbours))
fg
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=max(B);fg = group_union(g, (n.group for n in b.neighbours))
fg
b
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=min(B);fg = group_union(g, (n.group for n in b.neighbours))
fg
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=min(B);fg = group_union(g, [n.group for n in b.neighbours])
fg
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=min(B);fg = group_union(g, (n.group for n in b.neighbours))
fg
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=B[1];fg = group_union(g, (n.group for n in b.neighbours))
b
fg
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=B[1];fg = group_union(g, (n.group for n in b.neighbours))
fg
g.dump(fg)
g=goban('../sgf/test.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=B[1];fg = group_union(g, (n.group for n in b.neighbours));g.dump(fg)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));b=B[1];fg = group_union(g, (n.group for n in b.neighbours))
g.dump(fg)
B[1]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
fg
for x in fg: g.dump(x)
da = lambda x: dump_area(x)
dau = lambda x: dump_area(group_union(x))
da = lambda x: g.dump(area(x))
dau = lambda x: g.dump(area(group_union(x)))
da(g.c4)
da(g.g5)
da(g.i8)
da(g.i9)
import shape
1+j < 2+2j
1+1j < 2+2j
import shape
del shape
import shape
encode_shape([g.a1, g.b1, g.b2, g.c2])
encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a10, g.b10, g.b9, g.c9, g.a9, g.b8])
s2=encode_shape(g, [])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
s2
s1
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
s2
map(hex, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
i=iter([1,2,3])
i
i.next()
i=iter((1,2,3))
i
i=iter((1,2,3))
i=iter((i for i in 1,2,3))
i=iter((i for i in (1,2,3)))
i
i.next()
zip
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1
s2
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s1
a_in_b(s1, s2)
s2
a_in_b(shape_L, shape_I)
a_in_b([shape_L], [shape_I])
a_in_b([shape_I], [shape_L])
dir(iter)
dir(iter([]))
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b([shape_I], [shape_L])
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b([shape_I], [shape_L])
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b([shape_I], [shape_L])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b1, g.c1])
s2=encode_shape(g, [g.a5, g.b5, g.b4, g.c4, g.a4, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.c1, g.c2])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.c2])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.c1, g.d1])
a_in_b(s1, s2)
s2
s1=encode_shape(g, [g.a2, g.b1, g.c1, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
a_in_b(s1, s2)
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, a3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
a_in_b(s2, s1)
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
s2=encode_shape(g, [g.a1, g.b1, g.c2, g.b2, g.b3, g.a3])
a_in_b(s1, s2)
help(sorted)
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
s1=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.c2, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.c1, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.b4, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a2, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a5, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
s2=encode_shape(g, [g.a2, g.b1, g.c2, g.b2, g.b3, g.a3])
s1=encode_shape(g, [g.a1, g.b1, g.b2, g.b3])
a_in_b(s1, s2)
area
g.dump()
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(fg)
fg
g.dump(group_union(fg))
g.dump(group_union(g, fg))
g.dump(area(g.c6)
)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(group_union(g, fg))
g.dump(area(g.c6))
g.dump(area(g.d7))
g.dump(area(g.c14))
g.dump(area(g.c14.group))
g.dump(area(g.c14.group.fuzzy_group))
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.c14.group.fuzzy_group))
g.dump(area(g.d7))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g.dump(area(g.d7))
area(g.d7).neighbours
reduce(lambda a, b: a.update([b.group]) or a, area(g.d7).neighbours, set())
reduce(lambda a, b: a.add(n) or a, (n.group for n in area(g.d7).neighbours if n.color is not None), set())
reduce(lambda a, b: a.add(b) or a, (n.group for n in area(g.d7).neighbours if n.color is not None), set())
[ g.dump(x) for x in reduce(lambda a, b: a.add(b) or a, (n.group for n in area(g.d7).neighbours if n.color is not None), set()) ]
dir(set)
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
context(g.d7)
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
context(g.d7)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
context(g.d7)
c=context(g.d7)
g.dump(c['area'])
g.dump(c['neighbours'])
[g.dump(x) for x in c['neighbours']]
g.dump(group_union(c['neighbours']))
g.dump(group_union(g, c['neighbours']))
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
c=context(g.d7)
g.dump(group_union(g, c['neighbours']))
g.dump(group_union(g, c.neighbours))
area(group_union(g, c.neighbours))
g.dump(area(group_union(g, c.neighbours)))
encode_shape([g.c19, g.c18, g.d19, g.d18])
encode_shape(g, [g.c19, g.c18, g.d19, g.d18])
shape
help(set)
{'a':'toto'}.iter().next()
encode_shape(g, [g.c19, g.c18, g.d19, g.d18])
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
encode_shape(g, [g.c19, g.c18, g.d19, g.d18])
a=encode_shape(g, [g.c19, g.c18, g.d19, g.d18])
b=encode_shape(g, [g.a1, g.a2, g.b1, g.c1])
a_in_b(a, b)
b=encode_shape(g, [g.a1, g.a2, g.b1, g.b2])
a_in_b(a, b)
b=encode_shape(g, [g.a1, g.a2, g.b1, g.b2, g.c1])
a_in_b(a, b)
b=encode_shape(g, [g.a1, g.a2, g.b1, g.b2, g.c2, g.b3])
a_in_b(a, b)
a=encode_shape(g, [g.c19, g.c18, g.c17, g.d18])
a_in_b(a, b)
a=encode_shape(g, [g.c19, g.c18, g.c17, g.d17])
a_in_b(a, b)
a=encode_shape(g, [g.c19, g.c18, g.c17, g.d19])
a_in_b(a, b)
{'a':'toto'}.copy()
union(([x] for x in xrange(10)))
set.union(([x] for x in xrange(10)))
set_union(([x] for x in xrange(10)))
sum(([x] for x in xrange(10)))
g.a1
g.a1.W
g.a1.N
g.a1.S
g.a1.E
x = [g.c19, g.c18, g.c17, g.d19]
x
reduce(lambda a, b: a or len(b.neighbours.intersection(x)==2) and b, x, False)
reduce(lambda a, b: a or len(b.neighbours.intersection(x))==2 and b, x, False)
[coord(i.c.x-x[0].c.x, i.c.y-x[0].c.y) for i in x]
[(i.c.x-x[0].c.x, i.c.y-x[0].c.y) for i in x]
sorted([(i.c.x-x[0].c.x, i.c.y-x[0].c.y) for i in x])
(1,2)+(1,2)
def xzip(*a):
	i = [ iter(x) for x in a ]
	while True:
		yield [ x.next() for x in i ]
for a,b,c in xzip([1,2,3],('a','b','c'),('pouet','plop','coin')):
	print a,b,c
def xzip(*a):
	i = [ iter(x) for x in a ]
	while True:
		yield tuple((x.next() for x in i))
for a,b,c in xzip([1,2,3],('a','b','c'),('pouet','plop','coin')):
	print a,b,c
[(i.c.x-x[0].c.x, i.c.y-x[0].c.y) for i in x]
def xzip(*a):
	i = [ iter(x) for x in a ]
	while True:
		yield [x.next() for x in i]
for a,b,c in xzip([1,2,3],('a','b','c'),('pouet','plop','coin')):
	print a,b,c
for a,b,c in xzip([1,2,3],('a','b','c'),('pouet','plop')):
	print a,b,c
tuple.hash
tuple.__hash__
x = [g.c19, g.c18, g.c17, g.d19]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
x = [g.c19, g.c18, g.c17, g.d19]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
hash(shape_rel_coords(x))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
hash(shape_rel_coords(x))
src = shape_rel_coords(x)
src
map(lambda X: tuple((X(t) for t in src)), transpose)
map(lambda X: tuple((X(*t) for t in src)), transpose)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
shape_rel_coords(x)
map(lambda X: tuple((X(*t) for t in src)), transpose)
src = shape_rel_coords(x)
map(lambda X: tuple((X(*t) for t in src)), transpose)
src = shape_rel_coords(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.c17, g.d19]
src = shape_rel_coords(x)
src
transpose[0](src)
map(transpose[0], src)
map(lambda t: transpose[0](*t), src)
map(lambda t: transpose[1](*t), src)
x = [g.c19, g.c18, g.d18, g.d19]
src = shape_rel_coords(x)
map(lambda t: transpose[1](*t), src)
src = shape_rel_coords(x)
src
map(lambda t: transpose[1](*t), src)
map(lambda t: normalize_coords(transpose[1](*t)), src)
normalize_coords((transpose[1](*t) for t in src))
normalize_coords((transpose[1](*t) for t in src))==src
normalize_coords((transpose[2](*t) for t in src))==src
normalize_coords((transpose[3](*t) for t in src))==src
normalize_coords((transpose[4](*t) for t in src))==src
normalize_coords((transpose[5](*t) for t in src))==src
normalize_coords((transpose[6](*t) for t in src))==src
normalize_coords((transpose[7](*t) for t in src))==src
normalize_coords((transpose[0](*t) for t in src))==src
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.d18, g.d19]
all_rel_shapes(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.d18, g.d19]
all_rel_shapes(x)
x = [g.c19, g.c18, g.d18, g.d17]
all_rel_shapes(x)
xzip
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.c19, g.c18, g.d18, g.d19]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
min("azvvgb")
min("zvvgb")
all_rel_shapes(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
dir({})
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
all_rel_shapes(x)
st = shape_tree()
st.from_shape(all_rel_shapes(x))
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
st = shape_tree()
st.from_shape(all_rel_shapes(x))
st.from_shape(all_rel_shapes(x), lambda x:'pouet')
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
sys.exit(0)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
st = shape_tree()
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
st = shape_tree()
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
x = [g.a1, g.b1, g.c1, g.c2]
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
st = shape_tree()
st.from_shape(min(all_rel_shapes(x)), lambda x:'pouet')
st.from_shape(all_rel_shapes(x), lambda x:'pouet')
ars = all_rel_shapes(x)
ars
for a in ars:
	st.from_shape(a)
for a in ars:
	st.from_shape(a, lambda x: 'pouet')
dict.iteritems()
dict.iteritems
shape_from_strings([" + ", "+++", "+  "])
sorted(shape_from_strings([" + ", "+++", "+  "]))
shape_from_strings([" + ", "+++", "+  "])
st
st=shape_tree()
shape_from_strings(["+.", "++"])
sfs=shape_from_strings(["#.", "##"])
ars = all_rel_shapes(sfs)
ars
st.from_shape(ars)
st.from_shape(ars, 'pouet')
st.from_shape(list(ars), 'pouet')
st
for x, y in iterate_coords(g.size):
	print st.match(g, x, y)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sfs=shape_from_strings(["#.", "##"])
ars = all_rel_shapes(sfs)
[ st.from_shape(a) for a in ars ]
st = shape_tree()
[ st.from_shape(a) for a in ars ]
[ st.from_shape(a, 'pouet') for a in ars ]
st
for x, y in iterate_coords(g.size):
	print st.match(g, x, y)
g[3,4]
g[(3,4)]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g[3,4]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
g[3,4]
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sfs=shape_from_strings(["#.", "##"])
st = shape_tree()
ars = all_rel_shapes(sfs)
for x, y in iterate_coords(g.size):
	print st.match(g, x, y)
[ st.from_shape(a, 'pouet') for a in ars ]
for x, y in iterate_coords(g.size):
	print st.match(g, x, y)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sfs=shape_from_strings(["#.", "##"])
st = shape_tree()
ars = all_rel_shapes(sfs)
[ st.from_shape(a, 'pouet') for a in ars ]
for x, y in iterate_coords(g.size):
	print st.match(g, x, y)
g.dump()
st.match(g, 2, 17)
g[2, 17]
st.match(g, 2, 17)
st
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
sfs=shape_from_strings(["#.", "##"])
st = shape_tree()
ars = all_rel_shapes(sfs)
[ st.from_shape(a, 'pouet') for a in ars ]
st.match(g, 2, 17)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
st=shape_tree()
st.from_strings(["#.", "##"], 'pouet')
st
st.match_all(g)
st[0,0,'.']
st[0,0,'.'].payload
st[0,0,'.'].payload='toto'
st.match_all(g)
st.payload='toto'
st.match_all(g)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
st=shape_tree()
st.match_all(g)
st[0,0,'.'].payload='toto'
st.from_strings(["#.", "##"], 'pouet')
st.match_all(g)
for grp in st.match_all(g):
	g.duump(grp)
for grp in st.match_all(g):
	g.dump(grp)
for grp in st.match_all(g):
	print grp
	g.dump(grp[0])
st=shape_tree()
st.from_strings(["#.", "o#"], 'pouet')
for grp in st.match_all(g):
	g.dump(grp[0])
st.match_all(g)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
st=shape_tree()
st.from_strings(["#.", "o#"], 'empty_triangle')
st.from_strings(["#o", "o#"], 'crosscut')
st.from_strings(["#.", "o#"], 'cutting_point')
st
st.from_strings(["#.", "##"], 'empty_triangle')
st.match_all(g)
g=goban('../sgf/goama134.sgf');a = [ area(grp) for grp in g.groups ];A = reduce(lambda a, b: a.update(b) or a, a, group(g));print;g.dump(A);B=list(connex(A));fg = [ group_union(g, (n.group for n in b.neighbours)) for b in B ]
st=shape_tree()
st.from_strings(["#o", "o#"], 'crosscut')
st.from_strings(["#.", "o#"], 'cutting_point')
st.from_strings(["#.", "##"], 'empty_triangle')
st.match_all(g)
for i in xrange(1000): st.match_all(g)
for i in xrange(10): st.match_all(g)
sys.time
sys.gettime
sys.gettimeofday
dir(sys)
from time import time
time.time()
time()
st.match_all(g)
sys.exit(0)
st.match_all(g)
g.dump()
st.from_strings(['##','..','##'], 'bamboo_joint')
st.match_all(g)
stma = st.match_all(g)
filter(lambda x: x[1]=='bamboo_joint', stma)
st.keys()
g.intersections.keys()
stma = st.match_all(g)
g=goban(19)
st.match_all(g)
stma = st.match_all(g)
st.match_all(g)
stma = st.match_all(g)
help()
profile
profiler
profiling
prof
*prof*
pro
pr
p
modules
(1,)+(1,)
(1,)+[1,]
stma = st.match_all(g)
g.dump()
context(g.d7)
c = context(g.d7)
g.dump(c.area)
c = context(g.d6)
g.dump(c.area)
c = context(g.d5)
g.dump(c.area)
g.d7.c
g.d7.c.xy
g[3,5]
g.d7.c.xy
g.d7.c.s
stma
min(stma)
g.dump(min(stma))
g.dump(min(stma)[0])
min(stma)
grp=min(stma)[0]
[ i.c.s, i.c.xy for i in grp ]
[ (i.c.s, i.c.xy) for i in grp ]
g.c17
min(grp)
g.d17==min(grp)
g.d3==min(grp)
g.dump([g.d3])
grp=min(stma)[0]
grp
g.dump([g.d3])
grp=min(stma)[0]
g.d3==min(grp)
g.d17==min(grp)
grp
g.dump(grp)
bad_shape = shape_tree()
reduce(lambda a, b: a.update(b[0]) or a, bad, group(g))
g.dump(reduce(lambda a, b: a.update(b[0]) or a, bad, group(g)))
bad
g.dump(reduce(lambda a, b: a.update(b[0]) or a, bad[b], group(g)))
g.dump(reduce(lambda a, b: a.update(b[0]) or a, bad[BLACK], group(g)))
[ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ]
sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ])
sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ], None, lambda x:x[1])
sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ], None, lambda x:-x[1])
g.dump([g.m18])
w=sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ], None, lambda x:-x[1])
w[-3]
g.dump(w[-3][0])
c
c=sys.stdin.read(1)
v
c
dir(sys.stdin)
c=sys.stdin.next()
help(sys.stdin.readinto)
help(sys.stdin.read)
c=sys.stdin.read(1)
g.dump()
w=sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.groups ], None, lambda x:-x[1])
w
[ x[0] for x in w if x[1]>19.5 ]
g.dump(group_union([ x[0] for x in w if x[1]>19.5 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>19.5 ]))
w=sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.fuzzy_groups ], None, lambda x:-x[1])
g.fuzzy_groups
w=sorted([ (grp, len(area(grp))/float(len(grp))) for grp in g.fuzzy_groups[BLACK].union(g.fuzzy_groups[WHITE]) ], None, lambda x:-x[1])
w
g.dump(group_union(g, [ x[0] for x in w if x[1]>10 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>5 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>3 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>2 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>1 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>2 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>1 ]))
g.dump(group_union(g, [ x[0] for x in w if x[1]>3 ]))
A
A = dict(((grp, area(grp)) for grp in g.groups))
A
A = dict(((grp, area(grp)) for grp in g.groups if grp.color is BLACK))
AB = dict(((grp, area(grp)) for grp in g.groups if grp.color is BLACK))
AW = dict(((grp, area(grp)) for grp in g.groups if grp.color is WHITE))
AB
AW
areaB = group_union(AB.values())
areaB = group_union(g, AB.values())
areaB
connex
connex(areaB)
g.dump()
ga = g.p2.group
ga
area(ga)
[ n.group for n in area(ga).neighbours if n.color is ga.color ]
set((n.group for n in area(ga).neighbours if n.color is ga.color))
group_union((n.group for n in area(ga).neighbours if n.color is ga.color))
group_union(g, (n.group for n in area(ga).neighbours if n.color is ga.color))
ga = group_union(g, (n.group for n in area(ga).neighbours if n.color is ga.color))
ga
ga = group_union(g, (n.group for n in area(ga).neighbours if n.color is ga.color))
ga
ga = group_union(g, (n.group for n in area(ga).neighbours if n.color is ga.color))
ga
ga = group_union(g, (n.group for n in area(ga).neighbours if n.color is ga.color))
ga
g.duump(ga)
g.dump(ga)
fuzzy_2(g.d18)
g.dump(fuzzy_2(g.d18))
g.dump(area(g.g8))
g.dump(area(g.f9))
g.dump(area(g.f10))
g.dump(area(g.d12))
fuzzy_2(g.d18)
g.dump(fuzzy_2(g.d18))
g.dump(fuzzy_2(g.d3))
g.dump(fuzzy_2(g.i3))
g.add_stone(g.l5, WHITE)
g.dump(fuzzy_2(g.i3))
g.add_stone(g.i4, WHITE)
g.dump(fuzzy_2(g.i3))
g.dump(fuzzy_2(g.d3))
g.dump(fuzzy_2(g.h7))
g.dump(fuzzy_2(g.q4))
g.dump(fuzzy_2(g.h7))
g.add_stone(g.l5, WHITE)
g.add_stone(g.i4, WHITE)
g.dump(fuzzy_2(g.q4))
g.dump(fuzzy_2(g.b3))
g.dump(area(g.c7))
g.dump(fuzzy_2(g.c7))
filter(lambda x: len(x.liberties)==2, g.groups)
grp2=filter(lambda x: len(x.liberties)==2, g.groups)
context(grp2[0])
c
c=context(grp2[0])
c.area
g.dump(c.area)
g.dump(area(g.c13))
g.dump(fuzzy_2(g.c13))
g.dump(fuzzy_2(g.c7))
g.dump(area(g.c7))
g.dump(fuzzy_2(g.c13))
g.dump(area(g.d12))
g.dump(fuzzy_2(g.c13))
g.dump(area(g.d12))
area(g.d12)
g.dump(fuzzy_2(g.c13))
area(g.b1)
area(g.b2)
g.b2.color
g.b2.fuzzy_group
g.b2.group.fuzzy_group
g.b2.fuzzy_group
g.b2.group.fuzzy_group
g.dump(g.b2.group.fuzzy_group)
area(g.b2)
area(g.c3)
g.dump(area(g.c3))
g.dump(area(g.k3))
g.dump(area(g.c3))
g.dump(area(g.b2))
g.dump(area(g.c3.group.fuzzy_group))
g.dump(area(g.b3.group.fuzzy_group))
g.dump(area(g.d7.group.fuzzy_group))
g.dump(area(g.c7.group.fuzzy_group))
neighbour_score(g.d12)
g.d12.neighbours
[x.color for x in g.d12.neighbours]
[x.color for x in g.d11.neighbours]
neighbour_score(g.d11)
neighbour_score(g.d11, WHITE)
neighbour_score(g.d11, BLACK)
g.dump(area(g.c7.group.fuzzy_group))
g.dump(area(g.c13.group.fuzzy_group))
g.dump(area(g.h4))
area(g.b3)
g.dump(area(g.b3))
set((x.group for x in g.dump(area(g.b3))))
set((x.group for x in area(g.b3)))
set((x.group for x in area(g.b3).neighbours if x.color is g.b3.color))
g.dump(group_union(g, set((x.group for x in area(g.b3).neighbours if x.color is g.b3.color)))
g.dump(group_union(g, set((x.group for x in area(g.b3).neighbours if x.color is g.b3.color))))
fuzz = lambda i: set((x.group for x in area(i).neighbours if x.color is i.color))
fuzz(g.h4)
g.dump(group_union(g, fuzz(g.h4)))
g.dump(group_union(g, fuzz(g.i3)))
g.dump(group_union(g, fuzz(fuzz(g.i3))))
fuzz = lambda i: group(i.grid, (x.group for x in area(i).neighbours if x.color is i.color))
g.dump(group_union(g, fuzz(fuzz(g.i3))))
g.dump(group_union(g, fuzz(fuzz(fuzz(g.i3)))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(g.i3))))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(g.b4))))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(g.p4))))))
g.dump(group_union(g, fuzz(fuzz(fuzz(g.p4)))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(g.p4))))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(fuzz(g.p4)))))))
g.dump(group_union(g, fuzz(fuzz(fuzz(fuzz(g.p4))))))
g.dump(group_union(g, fuzz(g.c7)))
context(group_union(g, fuzz(g.c7)))
context(*group_union(g, fuzz(g.c7)))
context(group_union(g, fuzz(g.c7)))
group_union(g, fuzz(g.c7))
hash(set())
hash(group(g))
hash(group(g, (group(g),)))
g.dump()
rec_fuzz(g.c7)
g.dump(group_union(g, rec_fuzz(g.c7)))
toplevel_contexts(g)
for tlc in toplevel_contexts(g):	$
for tlc in toplevel_contexts(g): g.dump(tlc)
T=toplevel_contexts(g)
T
sorted(T)
T=sorted(T)
for tlc in T: g.dump(tlc)
g.go_back(120)
g.dump()
T=sorted(toplevel_contexts(g))
for tlc in T: g.dump(tlc)
g.go_forward(40)
g.dump()
T=sorted(toplevel_contexts(g))
for tlc in T: g.dump(tlc)
g.dump(area(g.e6))
g.dump(area(g.d6))
T=sorted(toplevel_contexts(g))
T
for tlc in T: g.dump(tlc)
for tlc in T: g.dump(area(tlc))
for tlc in T: g.dump(area(tlc)+tlc)
for c in map(context, T): g.dump(c.area+group_union(g, c.neighbours))
map(context, T)
T
T[0]
context(T[0])
g.b3.surrounding_groups
g.b3.group.surrounding_groups
T=sorted(toplevel_contexts(g))
T
context(T[0])
for c in map(context, T): g.dump(c.area+group_union(g, c.neighbours))
dir(c)
for grp, c in map(lambda x: (x, context(x)), T): g.dump(grp+c.area+group_union(g, c.neighbours))
T=sorted(toplevel_contexts(g))
for grp, c in map(lambda x: (x, context(x)), T): g.dump(grp+c.area+group_union(g, c.neighbours))
g.dump(area(g.e6))
import datetime
str(datetime.now())
str(datetime.datetime.now())
g=goban(9)
g.add_stone(g.c3)
g.add_stone(BLACK, g.c3)
g.add_stone(g.c3, BLACK)
g.current
g.tree
g.commit_position()
g.tree
g.add_stone(g.c7, WHITE)
g.commit_position()
g.dump()
g.tree
g.current
g.treee
g.tree
g.fork()
g.tree
g.remove_variation(g.current)
g.delete_variation(g.current)
dir(g)
g.delete_position(g.current)
g.tree
g.dump()
g.go_back()
g.dump()
g.go_back()
g.dump()
g.add_stone(g.g3, WHITE)
g.tree
1 is 1
a=int(1)
1 is a
a is 1
"aaa" is "aaa"
a= 'a'*3
b='aa'+'a'
a is b
object()
g.dump()
shicho_works(g.m5)
ret=shicho_works(g.m5)
ret[0]
g.dump()
g.next_variation()
g.dump()
g.tree
ret
ret[0]
ret[1][0]
ret[1].data
g.current.data
g.current
g.go_forward(10)
g.dump()
g.go_forward(10)
g.dump()
g.current
g.go_forward(10)
g.current
g.go_forward()
g.dump()
g.go_forward()
g.dump()
g.go_back(2)
g.dump()
g.go_back(1)
g.dump()
g.go_back(1)
g.dump()
g.go_forward();g.dump()
ret=shicho_works(g.m5)
ret[0]
g.go_forward();g.dump()
g.next_variation()
g.dump()
g.go_forward();g.dump()
g.next_variation()
g.go_forward();g.dump()
g.next_variation()
g.go_forward();g.dump()
g.next_variation()
g.go_forward();g.dump()
g.go_back()
g.next_variation()
g.dump()
ret=shicho_works(g.m5)
ret[0]
ret[1]
g.dump()
g.go_forward();g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.go_back(); g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.next_variation();g.dump()
ret=shicho_works(g.m5)
ret
g.go_forward();g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g=goban(9)
g.add_stone(g.c3, BLACK)
g.add_stone(g.d3, BLACK)
g.add_stone(g., BLACK)
g.dump()
g.add_stone(g.b4, BLACK)
g.add_stone(g.c4, WHITE)
g.dump()
shicho_works(g.c4)
g.next_variation();g.dump()
g.go_forward();g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.current
g.go_forward()
g.current
dir(g.current)
list(g.current)
shicho_works(g.c4)
g=goban('../sgf/corner.sgf')
g.dump()
g.add_stone(g.e4, WHITE)
g.dump()
shicho_works(g.e4)
g.dump()
g.add_stone(g.h7, WHITE)
g.dump()
shicho_works(g.e4)
g.dump()
g.add_stone(g.g6)
g.add_stone(g.g6, WHITE)
g.dump()
shicho_works(g.e4)
g.go_forward()
g.dump()
g.next_variation();g.dump()
g.go_back()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.dump()
g.next_variation();g.dump()
g.go_back();g.dump()
g.next_variation();g.dump()
g=goban('../sgf/corner.sgf')
g.add_stone(g.e4, WHITE)
g.add_stone(g.h7, WHITE)
shicho_works(g.e4)
g.dump()
g.go_forward();g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.next_variation();g.dump()
g.go_forward();g.dump()
g.dump()
grp2 = [ grp for grp in g.groups if len(grp.liberties)==2 ]
grp2
cap = [ grp for grp in grp2 ]
g.dump()
grp2 = [ grp for grp in g.groups if len(grp.liberties)==2 and shicho_works(grp)[0] ]
grp2
g.dump(group_union(g, grp2))
ataris = [ grp for grp in g.groups if len(grp.liberties)==1 ]
ataris
g.dump(group_union(g, ataris))
g.dump(group_union(g, ataris+cap))
g.dump(group_union(g, ataris+grp2))
toplevel_contexts(g)
[ g.remove_stone(x) for x in ataris+grp2 ]
[ g.remove_stone(x) for x in group_union(g, ataris+grp2) ]
toplevel_contexts(g)
for x in toplevel_contexts(g): g.dump(x)
area(g.r6)
g.dump(area(g.r6))
g.dump(g.r6.nth_neighbours(1))
g.dump(g.r6.group.nth_neighbours(1))
g.dump(g.r6.group.nth_neighbours(2))
g.dump(g.r6.group.nth_neighbours(3))
g.dump(g.r6.group.nth_neighbours(4))
g.dump(g.r6.group.nth_neighbours(5))
g.dump(area(g.r6))
g.dump(area(g.c7))
g.dump(area(g.d12))
g.dump(area(g.c7))
g.dump(area(g.r6))
toplevel_contexts(g)
sys.exit(0)
toplevel_contexts(g)
for tl in toplevel_contexts(g):
	g.dump(tl)
g.dump(area(g.m2))
g.dump(area(g.n4))
g.dump(area(g.n3))
g.dump(area(g.n4))
g.dump(fuzz(g.n2))
g.dump(fuzz(g.n3))
g.dump(fuzz(g.n3.group))
g.dump(fuzz(g.n4))
g.dump(area(g.n4))
g.dump(fuzz(g.n4))
g.dump(fuzz(fuzz(g.n4)))
g.dump(fuzz(fuzz(fuzz(g.n4))))
g.dump(fuzz(fuzz(fuzz(fuzz(g.n4))))
g.dump(fuzz(fuzz(fuzz(fuzz(g.n4)))))
g.dump(area(g.d12))
g.dump(area(g.c7))
g.dump(rec_fuzz(g.b3))
g.dump(rec_fuzz(g.b3.group))
g.dump(area(g.c13)
)
g.dump(area(g.c13))
g.dump(area(g.c7))
g.dump(rec_fuzz(g.b3.group))
g.dump(rec_fuzz(g.c7.group))
shicho_works(g.k4)
g.go_forward();g.dump()
g.next_variation(); g.dump()
g.go_forward();g.dump()
help(SGFlib)
help(SGF)
for tl in toplevel_contexts(g): g.dump(tl)
g.dump(area(g.d16))
g=goban('../mumuse_go/Murakawa-Iyama-9x9.sgf')
g=goban('../../mumuse_go/Murakawa-Iyama-9x9.sgf')
g.dump()
for tl in toplevel_contexts(g): g.dump(tl)
g = goban('../sgf/test.sgf')
g.dump()
for tl in toplevel_contexts(g): g.dump(tl)
for tl in toplevel_contexts(g): g.dump(tl) or g.dump(group_union([tl,area(tl)])
)
for tl in toplevel_contexts(g): g.dump(tl) or g.dump(group_union(g, [tl,area(tl)]))
tl = toplevel_contexts(g)
filter(lambda x: len(x)==1, tl)
map(shicho_works, tl)
g.go_forward()
g.dump()
g.go_forward()
g.current
g = goban('../sgf/test.sgf')
tl = toplevel_contexts(g)
map(shicho_works, tl)
g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.current
g.previous_variation(); g.dump()
g.current
filter(shicho_works, tl)
map(shicho_works, tl)
filter(lambda x: shicho_works(x)[0], tl)
tl = toplevel_contexts(g)
filter(lambda x: shicho_works(x)[0], tl)
g.dump(group_union(g, filter(lambda x: shicho_works(x)[0], tl)))
shicho_works(g.m5.group)
g.current
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_back(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g=goban('../mumuse_go/goproblems_12022.sgf')
g=goban('../../mumuse_go/goproblems_12022.sgf')
g.dump()
g.go_back(100)
g.dump()
g.go_forward(); g.dump()
g.next_variation()
g.go_forward(); g.dump()
tl = toplevel_contexts(g)
for t in tl: g.dump(t)
for t in tl: g.dump(group_union(g, [t, area(t)]))
)
for t in tl: g.dump(group_union(g, [t, area(t)]))
{1:2}+{3:4}
dir({})
print '\n'.join(dir({}))
doc
help({}.viewitems)
bad
[ g.dump(x[0] for x in bad['b'] ]
[ g.dump(x[0]) for x in bad['b'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['b'] ]
bad
[x[1] for x in bad]
[x[1] for x in bad[BLACK]]
[x[1] for x in bad[WHITE]]
bad
[x[1] for x in bad[WHITE]]
[x[1] for x in bad[BLACK]]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['b'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['w'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['b'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['w'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['b'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad['w'] ]
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad[WHITE] ]
bad
[ (g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad[WHITE] ]
def bla(x):
	print x
	return x
[ (bla(x[2], g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad[WHITE] ]
[ (bla(x[2]), g.dump(x[0]), x[1] and g.dump(x[1])) for x in bad[WHITE] ]
g.q11
g.q11.liberties
g=goban('../../mumuse_go/goproblems_12022.sgf')
g.dump()
g
c=context(g.k5)
c
c.area
c.neighbours
T=toplevel_contexts(g)
T
g.dump(T[0])
g.dump(T[1])
g.dump(T[2])
bad = bad_shape.match_all(g)
bad
bad[WHITE]
g.dump(group_union(g, (x[1] for x in bad[WHITE])))
g.legal_moves()
g.legal_moves(BLACK)
LM=g.legal_moves(BLACK)
g.dump(group_union(g, (x[1] for x in bad[WHITE])).intersection(LM))
estimate_score(g)
context(g.white)
context(g.white).area
g.dump(context(g.white).area)
M = filter(lambda x: len(x.liberties)>1, context(g.white).area)
g.dump(M)
M = filter(lambda x: len(x.liberties)>0, context(g.white).area)
M.add(g.l4)
M
M.append(g.l4)
M.remove(g.g1)
g.dump(M)
len(g.white)
mP = lambda: area(g.white).intersection(M)
evP = lambda: estimate_score(g)[0][WHITE]
combP = lambda l: max(l)
combO = lambda l: min(l)
explorer(g).explore(BLACK, WHITE, mP, mP, combP, combO, evP, evP)
del explorer
from sandbox import explorer
del explorer
from sandbox import explorer
explorer.__doc__
help(explorer)
g=goban('../../mumuse_go/goproblems_12022.sgf')
M = filter(lambda x: len(x.liberties)>1, context(g.white).area)
g.dump(M)
M = filter(lambda x: x.liberties, context(g.white).area)
g.dump(M)
g.dump(area(M))
g.dump(area(group(g, M)))
g.dump(area(M))
g.dump(area(group(g, M))+M)
M=area(group(g, M))+M
M
mP = lambda: filter(lambda x: x.liberties, M)
evP = lambda: estimate_score(g)[0][WHITE]
combP = lambda l: max(l)
combO = lambda l: min(l)
explorer(g).explore(BLACK, WHITE, mP, mP, combP, combO, evP, evP)
g.go_forward(); g.dump()
g.go_back()
g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
explorer(g).explore(BLACK, WHITE, mP, mP, combO, combP, evP, evP)
evP
evP()
connex
connex(area(g.white))
[ set((n.group for n in i.neighbours)) for i in connex(area(g.white)) ]
[ set((n.color for n in i.neighbours)) for i in connex(area(g.white)) ]
[ set((n.color for n in i.neighbours)) for i in connex(area(g.white)) if reduce(lambda a, b: a and len(b.liberties)>1, i.surrounding_groups) ]
set((i.group for i in connex(area(g.white)) if len(set((n.color for n in i.neighbours)))==1 and reduce(lambda a, b: a and len(b.liberties)>1, i.surrounding_groups)))
g2=goban('../sgf/goama134.sgf')
g2.dump()
g2 = goban('../sgf/2010-03-07-Blanc-Noir.sgf')
g2 = goban('../../mumuse_go/2010-03-07-Blanc-Noir.sgf')
g2.dump()
g2 = goban('../sgf/blob-gnugo.sgf')
g2
g2.dump()
tl = toplevel_contexts(g2)
tl
len(tl)
for t in tl: g2.dump(t)
tl[0]
g2 = goban('../sgf/blob-gnugo.sgf')
tl = toplevel_contexts(g2)
tl[0]
detect_eyes(None)
g2 = goban('../sgf/blob-gnugo.sgf')
tl = toplevel_contexts(g2)
detect_eyes(None)
detect_eyes(tl[0])
g.dump(group_union(g, detect_eyes(tl[0])))
g2.dump(group_union(g2, detect_eyes(tl[0])))
method
dir(__builtins__)
g2 = goban('../sgf/blob-gnugo.sgf')
g2.contexts
g2 = goban('../sgf/blob-gnugo.sgf')
g2.contexts
g2 = goban('../sgf/blob-gnugo.sgf')
g2.contexts
g2 = goban('../sgf/blob-gnugo.sgf')
g2.contexts
g2 = goban('../sgf/blob-gnugo.sgf')
g2.contexts
[ detect_eyes(x) for x in g2.contexts ]
ey = [ (x, detect_eyes(x)) for x in g2.contexts ]
for x, ex in ey:
	g.dump(x); g.dump(ex)
for x, ex in ey:
	g2.dump(x); g2.dump(ex)
for x, ex in ey:
	if ex:
		g2.dump(x); g2.dump(group_union(g2, ex))
area
area(g.s4)
g.dump(area(g.s4))
g2.dump(area(g2.s4))
filter(lambda x: red(area(g2.s4.fuzzy_group))
g2.dump(area(g2.s4.group.fuzzy_group))
red = lambda x, p: reduce(lambda a, b: a and p(b), x, True)
red = lambda x, p: reduce(lambda a, b: a and p(b), x.neighbours, True)
filter(lambda x: red(x, lambda i: i.color is None and red(i, lambda z: z.color in (None, BLACK) or i.color is BLACK)), area(g2.s4.group.fuzzy_group))
g.dump(filter(lambda x: red(x, lambda i: i.color is None and red(i, lambda z: z.color in (None, BLACK) or i.color is BLACK)), area(g2.s4.group.fuzzy_group)))
g2.dump(filter(lambda x: red(x, lambda i: i.color is None and red(i, lambda z: z.color in (None, BLACK) or i.color is BLACK)), area(g2.s4.group.fuzzy_group)))
A=area(g2.s4.group.fuzzy_group)
A-A.neighbours.neighbours
g2.dump(A)
n=group(g2, (x for x in A.neighbours if x.color is None))
A-n.neighbours
n=group(g2, (x for x in A.neighbours if x.color is None))
n
g.dump(n)
g2.dump(n)
A=area(g2.s4.group.fuzzy_group)
A
g2.dump(A)
B=filter(lambda x: A.issuperset(x.neighbours), A)
B
A
g.dump(B)
g2.dump(B)
A=area(g2.s4.group.fuzzy_group)+g2.s4.group.fuzzy_group
B=filter(lambda x: A.issuperset(x.neighbours), A)-g2.s4.group.fuzzy_group
B=group(g2, filter(lambda x: A.issuperset(x.neighbours)), A)-g2.s4.group.fuzzy_group
B=group(g2, filter(lambda x: A.issuperset(x.neighbours), A))-g2.s4.group.fuzzy_group
B
g2.dump(B)
B=group(g2, filter(lambda x: B.issuperset(x.neighbours), B))
B
B=group(g2, filter(lambda x: A.issuperset(x.neighbours), A))-g2.s4.group.fuzzy_group
A=B+g2.s4.group.fuzzy_group
B=group(g2, filter(lambda x: A.issuperset(x.neighbours), A))-g2.s4.group.fuzzy_group
B
g2.dump(B)
[ estimate_eyespace(grp) for grp in g.contexts ]
g.dump()
g=goban(9)
help(max)
x
x=[[1],[1,2],[3]]
map(x)
max(x)
max(x, key=lambda a: len(a))
import itertools
help(itertools)
itertools.tee(iter([1,2,3,4,5]), 2)
y=itertools.tee(iter([1,2,3,4,5]), 2)
y
x,y=itertools.tee(iter([1,2,3,4,5]), 2)
x.next()
y.next()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
g.go_forward()
filename='../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf'
import gomill
dir(gomill)
import gomill.*
help(gomill)
import gomill.sgf_reader
import gomill.sgf_reader as sgfrd
help(sgfrd)
import gomill.sgf_reader.read_sgf as read_sgf
from gomill.sgf_reader import read_sgf
read_sgf(filename)
read_sgf(open(filename).read())
s=read_sgf(open(filename).read())
dir(s)
s.get_setup_and_moves
s.get_setup_and_moves()
help(s.get_setup_and_moves)
s.nodes
dir(s.nodes[0])
[x.prop_list for x in s.nodes]
[dir(x.prop_list[0]) for x in s.nodes]
[(p.identifier, p.values) for x in s.nodes for p in x.prop_list]
help(s)
s.get_handicap()
s.get_komi()
s.get_setup()
help(s)
s.get_size()
help(sgfrd)
[dict(((p.identifier, p.values) for p in x.prop_list)) for x in s.nodes]
help(gomill.utils)
import gomill.utils as gmu
import gomill.util as gmu
import gomill.tools as gmu
help(gomill)
import gomill.gomill_utils as gmu
help(gmu)
import gomill.gomill_common as gmu
help(gmu)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G.go_forward()
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
X = SGFReader(filename)
X = SGFParser(open(filename).read()).parse()
filename='../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf'
X
dir(X)
[x for x in X]
X = X[0]
X
dir(X)
[x for x in X]
X.variations
dir(X[0]
)
X[0]
[x for x in X[0].iteritems()]
[x for x in X[0].items()]
[x for x in X[1].items()]
X[1]['AB']
dir(X[1]['AB'])
[x for x in X[1]['AB']]
X[0]['SZ']
dir(X[0]['SZ'])
[x for x in X[0]['SZ']]
filename='../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf'
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G.contexts
[G.dump(x) for x  in G.contexts]
detect_eyes(G)
detect_eyes(G.groups)
[detect_eyes(grp) for grp in G.groups]
eyes = dict(((grp, detect_eyes(grp)) for grp in G.groups))
eyes
dict(((k, len(v)) for k, v in eyes.iteritems()))
[k for k, v in eyes.iteritems() if not len(v)]
[g.dump(k) for k, v in eyes.iteritems() if not len(v)]
[G.dump(k) for k, v in eyes.iteritems() if not len(v)]
eyes = dict(((grp, detect_eyes(grp)) for grp in G.contexts))
[G.dump(k) for k, v in eyes.iteritems() if not len(v)]
eyes
[G.dump(k+group_union(G, v)) for k, v in eyes if len(v)>=2 or len(v)==1 and len(min(v))>8]
[G.dump(k+group_union(G, v)) for k, v in eyes.iteritems() if len(v)>=2 or len(v)==1 and len(min(v))>8]
G.dump(group_union(G, (k+group_union(G, v)) for k, v in eyes.iteritems() if len(v)>=2 or len(v)==1 and len(min(v))>8))
G.dump(group_union(G, ((k+group_union(G, v)) for k, v in eyes.iteritems() if len(v)>=2 or len(v)==1 and len(min(v))>8))
)
G.dump(area(G.g3.group)
)
help(itertools)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump(area(G.g3.group))
[ set((s.group for s in grp)) for grp in G.contexts ]
dict(( (k, v) for k, vlist in ((G.contexts, set((s.group for s in grp))) for grp in G.contexts) for v in vlist))
[(k, v) for k, vlist in ((G.contexts, set((s.group for s in grp))) for grp in G.contexts) for v in vlist]
[(k, v) for k, vlist in ((G.contexts, set((s.group for s in grp))) for grp in G.contexts) for v in vlist][0]
[(k, v) for k, vlist in ((grp, set((s.group for s in grp))) for grp in G.contexts) for v in vlist][0]
dict(((k, v) for k, vlist in ((grp, set((s.group for s in grp))) for grp in G.contexts) for v in vlist))
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.dump()
G.context_by_group
G.groups_by_context
min(G.contexts)
min(G.contexts).eyes
G.dump(min(G.contexts))
[ c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3 ]
G.dump(group_union(G,[ c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3 ]))
connex((c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))
connex(group(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3)))
connex(group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3)))
connex(area(group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))))
faito = group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))
faito
g.dump(faito)
G.dump(faito)
G.dump(area(faito)+faito)
connex(area(faito)+faito)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
faito = group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))
connex(area(faito)+faito)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
faito = group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))
cnx(area(faito)+faito)
from grid import cnx
cnx(area(faito)+faito)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
faito = group_union(G, (c for c in G.contexts if not c.eyes or len(c.eyes)==1 and len(min(c.eyes))<3))
cnx(area(faito)+faito)
from grid import cnx
cnx(area(faito)+faito)
|g.dump(c) for c in cnx(area(faito)+faito)]
[g.dump(c) for c in cnx(area(faito)+faito)]
[G.dump(c) for c in cnx(area(faito)+faito)]
sys.exit(0)
identify_semeais(G)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
identify_semeais(G)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
identify_semeais(G)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
identify_semeais(G)
len(identify_semeais(G))
sem
sem = identify_semeais(G)[0]
G.dump(sem)
and(True, True)
bool.__and__(True, True)
bool.__and__(True, True, True)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
sem
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
status(sem)
G.dump([G.t16])
G.dump(sem)
G.context_by_group
G.context_by_group[group(G, [G.t16]))
G.context_by_group[group(G, [G.t16])
]
G.context_by_group[group(G, [G.t16.group])
]
G.groups_by_context[group(G, [G.t16.group])]
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
G.context_by_group[group(G, [G.t16])
]
sem = identify_semeais(G)[0]
G.dump(sem)
status(sem)
G.context_by_group[group(G, [G.t16])
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
G.dump(sem)
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
G.dump(sem)
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[0]
G.dump(sem)
status(sem)
g.go_forward()
G.go_forward()
G.dump(sem)
G.next_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.previous_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
sem = identify_semeais(G)[1]
G.dump(sem)
status(sem)
dir(goban())
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[1]
G.dump(sem)
status(sem)
G.current
G.dump(à
G.dump(sem)
G.go_forward; G.dump(sem)
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
G.go_back(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
G.previous_variation()
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.previous_variation()
G.next_variation(); G.dump(sem)
G.previous_variation();G.dump(sem)
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G.go_forward(); G.dump(sem)
G.next_variation(); G.dump(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[1]
G.dump(sem)
status(sem)
sem = identify_semeais(G)[0]
G.dump(sem)
sem = identify_semeais(G)[3]
G.dump(sem)
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
status(sem)
G.go_forward(); G.dump(sem)
sys.raw_input()
os.raw_input()
import os
os.raw_input()
raw_input
raw_input()
sys.stdin.read(1)
dir(sys.stdin)
sys.stdin.mode
help()
pygame
pygame.locals
termios
term
terminal
ansi
*ansi
*ansi*
ANSI
import ANSI
dir(ANSI)
a
a=ANSI.ANSI()
a.erase_screen()
print a
print >> a, "pouet"
a
print a
dir(a)
from utils import crawl
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
stat
stat = status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
stat = status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]
G.dump(sem)
sem = identify_semeais(G)[3]
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
status(sem)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
status(sem)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
status(sem)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
status(sem)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
status(sem)
st=status(sem)
crawl(G, st[WHITE])
crawl(G, st[WHITE][1])
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem)
crawl(G, st[WHITE][1])
help(pygame.event)
import pygame
help(pygame.event)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem)
crawl(G, st[WHITE][1])
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem)
crawl(G, st[WHITE][1])
screen = pygame.display.set_mode( (640,480) )
pygame.display.set_caption('Python numbers')
screen.fill((159, 182, 205))
import pygame
screen = pygame.display.set_mode( (640,480) )
pygame.display.set_caption('Python numbers')
screen.fill((159, 182, 205))
crawl(G, st[WHITE][1])
reset
dir(__builtins__)
help(reload)
reload(sandbox)
from sandbox import *
reload(sandbox)
import sandbox
reload(sandbox)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem)
st
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem)
st=status(sem, 3)
sem
G.dump()
G.go_back();G.dump()
st=status(sem, 3)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem, 3)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[3]; G.dump(sem)
st=status(sem, 3)
st=status(sem, maxdepth=3)
dict(((k, s[0]) for k, s in st.iteritems()))
sem = identify_semeais(G)[4]; G.dump(sem)
st=status(sem)
st=status(sem, maxdepth=3)
g.go_back(100)
G.go_back(100)
G.dump()
st=status(sem, maxdepth=3)
dict(((k, s[0]) for k, s in st.iteritems()))
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[4]; G.dump(sem)
st=status(sem, maxdepth=2)
dict(((k, s[0]) for k, s in st.iteritems()))
reload(status)
sys.exit(0)
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
sem = identify_semeais(G)[4]; G.dump(sem)
st=status(sem, maxdepth=2)
st
dict(((k, s[0]) for k, s in st.iteritems()))
q = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_001.sgf')
q.dump()
sem = identify_semeais(G)[4]; G.dump(sem)
allsem = identify_semeais(q)
allsem
[q.dump(x) for x in allsem]
st = status(allsem[0], maxdepth=5)
dict(((k, s[0]) for k, s in st.iteritems()))
q.dump(allsem[0])
q.dump()
q.go_forward(); q.dump()
q.go_back()
q.go_forward(); q.dump()
q.go_back()
q.go_forward(); q.dump()
q.current.data-q.current.parent.data
X=q.current.data-q.current.parent.data
X
while X>(19*4): X/=(19*4)
X
X=q.current.data-q.current.parent.data
while X>(y*(19*4)): y+=1
y=0
while X>(y*(19*4)): y+=1
y=0
while X>((19*4)**(y+1)): y+=1
y
4**19
L=4**19
y=0
while X>(L**(y+1)): y+=1
y
X-(L**(y+1))
X-(L**y)
x=0
while X>(4**(x+1)): x+=1
x
X2=X-(L**y)
while X2>(4**(x+1)): x+=1
x
X2
X
y
L
X2=X/(L**y)
x2
X2
L
x=0
x=0;while X2>(4**(x+1)): x+=1
while X2>(4**(x+1)): x+=1
x
y
q[x,y]
q[x,18-y]
q.dump([q.t16])
q.go_back();q.dump()
g.dump()
identify_semeais
allsem = identify_semeais(g)
allsem
len(allsem)
g.dump(allsem[0])
area(g.d12)
g.dump(area(g.d12))
g.dump(area(g.i12))
g.dump(area(g.d12))
g.dump(area(g.i12))
g.contexts
len(g.contexts)
for c in g.contexts: g.dump(c)
g.contexts[2]
A=g.contexts[2]
A
g.dump(A)
g.dump(area(A))
g.dump(area(A)+A+A.neighbours)
X=goban(area(A)+A+A.neighbours)
X
X.dump()
X=goban(group(g, area(A)+A+A.neighbours))
X.dump()
dir(X)
X.size
X.intersections
A=g.contexts[2]; g.dump(A)
A=g.contexts[0]; g.dump(A)
A=g.contexts[0]; B = group(g, A+area(A)+A.neighbours); g.dump(B)
A=g.contexts[0]; B = group(g, A+area(A)+A.neighbours); g.dump(B); X=goban(B); X.dump()
A=g.contexts[0]; B = group(g, A+area(A)+A.neighbours); g.dump(B); X=goban(view=B); X.dump()
X.contexts
with
time()
import time
time.time()
with time.time():
	print 'toto'
A=g.contexts[0]; B = group(g, A+area(A)+A.neighbours); g.dump(B); X=goban(view=B); X.dump()
st.match_all(X)
s=st.match_all(G)
st.match_all(g)
s=st.match_all(g)
s=st.match_all(X)
A
G = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(G)
allsem
G.dump(allsem[3])
s=st.match_all(G, A)
s=st.match_all(G)
s=st.match_all(G, A)
s=st.match_all(G)
s=st.match_all(G, A)[A
help(shape)à
help(shape)
shapeètree
shape_tree
test = shape_tree()
test.match(g)
test.match_all(g)
allsem = identify_semeais(g)
allsem
A=allsem[3]
allsem
len(allsem)
g=goban('../sgf/blob-gnugo.sgf')
allsem = identify_semeais(g)
len(allsem)
g.dump(*allsem)
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
g.dump()
allsem = identify_semeais(g)
len(allsem)
A=allsem[3]
ga = goban(A)
ga = goban(view=A)
ga.dump()
ga.q13
ga.q12
ga.q13.color
outslib = group(ga, (ga.q13, ga.q14))
reduce(lambda a, b: a.color==b.color, (ga.q13,))
ga.dump(area(ga.white))
ga.dump(area(ga.black))
A=allsem[2]
ga = goban(view=A)
ga.dump()
ga = goban(view=allsem[0]);ga.dump()
ga = goban(view=allsem[1]);ga.dump()
ga = goban(view=allsem[2]);ga.dump()
ga = goban(view=allsem[3]);ga.dump()
ga = goban(view=allsem[4]);ga.dump()
ga = goban(view=allsem[5]);ga.dump()
ga = goban(view=allsem[0]);ga.dump()
cnx(ga.white.liberties)
wl = cnx(ga.white.liberties)
filter(lambda lgrp: reduce(lambda a, b: a and b.color in (None, WHITE), lgrp.neighbours, True), wl)
wl
reduce(lambda a, b: a and b.color in (None, WHITE), wl[0].neighbours, True)
reduce(lambda a, b: a and b.color in (None, WHITE), wl[2].neighbours, True)
reduce(lambda a, b: a and (b not in ga.intersections or b.color in (None, WHITE)), wl[2].neighbours, True)
filter(lambda lgrp: reduce(lambda a, b: a and (b not in ga.intersections or b.color in (None, WHITE)), wl[2].neighbours, True), wl)
ga.intersections
filter(lambda lgrp: reduce(lambda a, b: a and (b.c not in ga.intersections or b.color in (None, WHITE)), wl[2].neighbours, True), wl)
filter(lambda lgrp: reduce(lambda a, b: a and (b.c.xy not in ga.intersections or b.color in (None, WHITE)), wl[2].neighbours, True), wl)
filter(lambda lgrp: reduce(lambda a, b: a and (b.c.xy not in ga.intersections or b.color in (None, WHITE)), lgrp, True), wl)
filter(lambda lgrp: reduce(lambda a, b: a and ((b.c.xy not in ga.intersections) or b.color in (None, WHITE)), lgrp, True), wl)
ga.b12.neighbours
reduce(lambx.color for x in ga.b12.neighbours]
filter(lambda lgrp: reduce(lambda a, b: a and (b.c.xy not in ga.intersections) or b.color in (None, WHITE)), lgrp, True), wl)
filter(lambda lgrp: reduce(lambda a, b: a and (b.c.xy not in ga.intersections) or b.color in (None, WHITE)), lgrp, True), wl))
filter(lambda lgrp: reduce(lambda a, b: a and ((b.c.xy not in ga.intersections) or b.color in (None, WHITE)), lgrp, True), wl)
filter(lambda lgrp: reduce(lambda a, b: a and (b not in ga.intersections or b.color in (None, WHITE)), wl[2].neighbours, True), wl)
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(g)
ga = goban(view=allsem[0]);ga.dump()
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(g)
ga = goban(view=allsem[0]);ga.dump()
g.dump()
ga = goban(view=allsem[1]);ga.dump()
ga
ga.b10.grid
ga.current.data
g.current.data
ga.d12.neighbours
ga.go_forward()
ga.current
id(ga.current)
id(g.current)
ga.current.data = g.current.data
ga.dump()
wl = cnx(ga.white.liberties)
reduce(lambda a, b: a and b.color in (None, WHITE), wl[0].neighbours, True)
wl
filter(lambda lgrp: reduce(lambda a, b: a and b.color in (None, WHITE), lgrp.neighbours, True), wl)
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(g)
[ g.dump(x) for x in allsem ]
ga = goban(view=allsem[3]); ga.dump()
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(g)
[ g.dump(x) for x in allsem ]
ga = goban(view=allsem[3]); ga.dump()
outside_liberties(ga)
ga = goban(view=allsem[0]); ga.dump()
ga.dump(area(ga.black))
ga.dump(area(ga.black)+ga.black)
st = status(group(ga, ga.intersections.itervalues()), maxdepth=5)
st
estimate_score(ga)
ga.dump()
ga.go_back(100)
ga.dump()
estimate_score(ga)
ga.add_stone(ga.g2, WHITE)
estimate_score(ga)
ga.add_stone(ga.h1, WHITE)
estimate_score(ga)
ga.dump()
st = shape_tree()
from sandbox import gm_shapes
st.from_strings(gm_shapes['aji'][0])
st.from_strings(*gm_shapes['aji'][0])
st.from_strings(*gm_shapes['aji'])
st.from_strings(('f!.',), 'liberty')
st.from_strings(('f!', ' .'), 'liberty')
ga.dump()*
ga.dump()
ga.go_back(2)
ga.dump()
ga.go_back(2)
ga.dump()
ga.go_back(2)
ga.go_back(100)
ga.dump()
ga.remove_stone(ga.g2)
ga.remove_stone(ga.h1)
ga.add_stone(ga.h2, BLACK)
ga.dump()
st.match_all(ga)
st
st = shape_tree()
st
st.from_strings(('f!.',), 'liberty')
st.from_strings(('f!', ' .'), 'liberty')
st
st.match_all(ga)
[ b for a,b,c in st.match_all(ga) ]
[ b for a,b,c in st.match_all(ga)['w'] ]
set((b for a,b,c in st.match_all(ga)['w']))
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
ga = goban(view=allsem[3]); ga.dump()
allsem = identify_semeais(g)
ga = goban(view=allsem[3]); ga.dump()[B
ga = goban(view=allsem[3]); ga.dump()
st = shape_tree()
st.from_strings(('f!.',), 'liberty')
st.from_strings(('f!', ' .'), 'liberty')
ga = goban(view=allsem[2]); ga.dump()
set((b for a,b,c in st.match_all(ga)['w']))
st
sta = status(group(ga, ga.intersections.itervalues()), maxdepth=5)
g = goban('../STS_RV/regression/Sgf_test_files/Class01eProblems/_semeai_Ce_033.sgf')
allsem = identify_semeais(g)
ga = goban(view=allsem[2]); ga.dump()
sta = status(group(ga, ga.intersections.itervalues()), maxdepth=5)
sta
ga.dump()
ga.go_forward()
ga.dump()
ga.next_variation()
ga.dump()
'c' > '0'
ord('c')
ord('0')
sys.exit(0)
g.dump()
g=goban('../sgf/p31.sgf')
g.dump()
g.go_back(20)
g.dump()
g.go_back(2)
g.dump()
g.go_back(2)
g.dump()
g.go_back(2)
g.dump()
g.go_back(2)
g.dump()
g.go_back(2)
g.dump()
g.go_back(2)
g.dump()
shicho_works
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(30)
g.dump()
g=goban('../sgf/p31.sgf')
g.go_back(36)
g.dump()
g.go_forward()
g.dump()
g.go_forward()
g.dump()
shicho_works(g.n4.group)
help(WHITE)
help('WHITE')
WHITE
g=goban('../sgf/p31.sgf')
g.go_back(34)
g.dump()
shicho_works(g.n4.group)
g.dump(g.n4.group)
g=goban('../sgf/p31.sgf')
g.dump(g.n4.group)
g.go_back(34)
g.dump(g.n4.group)
shicho_works(g.n4.group)
sys.exit(0)
g.dump(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
g.dump(g.n4.group)
shicho_works(g.n4.group)
sys.exit(0)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g.dump([g.o5])
shicho_works(g.n4.group)
g.go_back()
shicho_works(g.n4.group)
sys.exit(0)
g=goban('../sgf/p31.sgf')
shicho_works(g.n4.group)
g.go_back(34)
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
g.dump()
g.go_forward(); g.dump()
g.go_back(4)
g.dump()
g.go_back(2)
g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_back(); g.gump()
g.go_back(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
g.go_back(); g.dump()
g.next_variation(); g.dump()
g.go_back(); g.dump()
g.go_forward(); g.dump()
g.next_variation(); g.dump()
shicho_works(g.n4.group)
g=goban('../sgf/p31.sgf')
g.go_back(34)
shicho_works(g.n4.group)
